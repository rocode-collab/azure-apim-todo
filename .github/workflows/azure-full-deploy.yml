name: Full Azure API + Backend Deploy

on:
  push:
    branches:
      - main

env:
  BACKEND_RG: backend-rg
  APIM_RG: apim-rg
  APIM_NAME: my-sandbox-apim-instance
  APP_SERVICE_PLAN: my-appservice-plan
  FUNCTION_APP_NAME: my-sandbox-backend-app
  API_ID: todo-api
  API_PATH: todo
  OPENAPI_FILE: openapi-todo.json
  APIM_POLICY_FILE: apim-policy.xml

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # -----------------------------------------
    # Step 1: Deploy infrastructure (Bicep)
    # -----------------------------------------
    - name: Deploy backend infrastructure with Bicep
      run: |
        az group create -n $BACKEND_RG -l canadacentral

        # Use inline Bicep (this can be replaced by a bicep file checked into your repo)
        # Assumes the app service plan exists, so skip creating it (if needed add that)
        bicepFile=infra.bicep
        cat > $bicepFile << EOF
        param location string = 'canadacentral'
        param functionAppName string = '$FUNCTION_APP_NAME'
        param storageAccountName string = toLower('${FUNCTION_APP_NAME}sa${RANDOM}')
        param cosmosAccountName string = toLower('${FUNCTION_APP_NAME}cosmos${RANDOM}')

        resource storageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' = {
          name: storageAccountName
          location: location
          sku: {
            name: 'Standard_LRS'
          }
          kind: 'StorageV2'
          properties: {
            accessTier: 'Hot'
          }
        }

        resource cosmosAccount 'Microsoft.DocumentDB/databaseAccounts@2022-11-15' = {
          name: cosmosAccountName
          location: location
          kind: 'GlobalDocumentDB'
          properties: {
            databaseAccountOfferType: 'Standard'
            enableFreeTier: true
            locations: [
              {
                locationName: location
                failoverPriority: 0
                isZoneRedundant: false
              }
            ]
            consistencyPolicy: {
              defaultConsistencyLevel: 'Session'
            }
          }
        }

        resource cosmosDb 'Microsoft.DocumentDB/sqlDatabases@2022-11-15' = {
          name: '\${cosmosAccount.name}/ToDoDb'
          properties: {
            resource: {
              id: 'ToDoDb'
            }
          }
          dependsOn: [
            cosmosAccount
          ]
        }

        resource cosmosToDoContainer 'Microsoft.DocumentDB/sqlContainers@2022-11-15' = {
          name: '\${cosmosDb.name}/ToDoItems'
          properties: {
            resource: {
              id: 'ToDoItems'
              partitionKey: {
                paths: ['/id']
                kind: 'Hash'
              }
            }
          }
          dependsOn: [
            cosmosDb
          ]
        }

        resource cosmosIdempotencyContainer 'Microsoft.DocumentDB/sqlContainers@2022-11-15' = {
          name: '\${cosmosDb.name}/IdempotencyKeys'
          properties: {
            resource: {
              id: 'IdempotencyKeys'
              partitionKey: {
                paths: ['/id']
                kind: 'Hash'
              }
            }
          }
          dependsOn: [
            cosmosDb
          ]
        }

        resource functionApp 'Microsoft.Web/sites@2022-03-01' = {
          name: functionAppName
          location: location
          kind: 'functionapp'
          properties: {
            serverFarmId: resourceId('Microsoft.Web/serverfarms', '${APP_SERVICE_PLAN}')
            siteConfig: {
              appSettings: [
                {
                  name: 'AzureWebJobsStorage'
                  value: storageAccount.properties.primaryEndpoints.blob
                }
                {
                  name: 'FUNCTIONS_WORKER_RUNTIME'
                  value: 'python'
                }
                {
                  name: 'COSMOS_ENDPOINT'
                  value: cosmosAccount.properties.documentEndpoint
                }
                {
                  name: 'COSMOS_KEY'
                  value: listKeys(cosmosAccount.id, '2022-11-15').primaryMasterKey
                }
                {
                  name: 'COSMOS_DATABASE'
                  value: 'ToDoDb'
                }
                {
                  name: 'COSMOS_TODO_CONTAINER'
                  value: 'ToDoItems'
                }
                {
                  name: 'COSMOS_IDEMPOTENCY_CONTAINER'
                  value: 'IdempotencyKeys'
                }
              ]
            }
          }
          dependsOn: [
            storageAccount
            cosmosToDoContainer
            cosmosIdempotencyContainer
          ]
        }
        EOF

        az deployment group create -g $BACKEND_RG -f $bicepFile --parameters functionAppName=$FUNCTION_APP_NAME

    # -----------------------------------------
    # Step 2: Deploy Python Azure Function code
    # -----------------------------------------
    - name: Zip and deploy Python Function App
      run: |
        zip -r functionapp.zip azure-apim-todo/function_app/*

        az functionapp deployment source config-zip -g $BACKEND_RG -n $FUNCTION_APP_NAME --src functionapp.zip

    # -----------------------------------------
    # Step 3: Import API to APIM and apply policy
    # -----------------------------------------
    - name: Import API and apply APIM policy
      run: |
        az extension add --name apim || true

        az apim api import \
          --resource-group $APIM_RG \
          --service-name $APIM_NAME \
          --api-id $API_ID \
          --path $API_PATH \
          --specification-path $OPENAPI_FILE \
          --specification-format OpenApiJson \
          --service-url "https://${FUNCTION_APP_NAME}.azurewebsites.net/api"

        az apim api policy set \
          --resource-group $APIM_RG \
          --service-name $APIM_NAME \
          --api-id $API_ID \
          --policy-file $APIM_POLICY_FILE
